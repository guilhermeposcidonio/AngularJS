-------------------------- Curso da Udemy --------------------------

Angular é um famework uma plataforma de codigo aberto  

* a aplicação é feita por componentes que sao pequenas linhas de codigo e cada componente pode 
conter outros componentes, dentro dos componentes podemos ter arquivos que compoem o componente como
o template HTML, o css e o TS.
Os componentes precisam de uma camada de serviço onde pode ser feita para requisições.
os modulos sao p que compoerm os componentes e a camada de serviço.
* O angular trabalha com modulos e esses modulos sao lazy load que é o carregamento lento neste caso
ele carrega a aplicação aos poucos para que nao gere uma "sobre carga" caso o cliente esteja no 3g e
a plicação seja muito grande como exemplo se a pliocação tem 3 gb o angular carrega os modulos e 
cada modulo pode conter 100 mb e assim vai ate carregar toda a plicação

*ng build ou ng b gera os aquivos para colocar no servidor ou na nuvem 
opos o comando ele ira criar uma pasta chamada dist e nesta pasta os arquivos em js para submetlos ao servidor

*ng g c nomeDoArquivo gera os arquivos (quando o nome do arquivo esta em camelcase ele troca por - ex. dataBiding vai ficar data-biding)
g- generate / c - component

nas verções 15 do angular ele nao gera mais o ngInit entao tem que colocar na mao e nao o projeto nao 
roda basta colocar dentro do export 
  constructor() {}
  ngOnInit() {}
  e ele ira funcionar
  
*constructor(){} dentro do component sempre sera executado primeiro que qualquer coisa, apos o constructor sera executado uma das opções(conhecidos como
ciclos de vida) abaixo:
  ngInit()
  ngOnChanges()
  ngDoCheck()
    ngAfterContentInit()
	ngAfterContentChecked()
	ngAfterViewInit()
	ngAfterViewChecked()
  ngOnDestroy()

*ngOnInit é utilizado para iniciar a aplicaçãoa primeira vez os dados ou inicializa o componente
 quando o ngOnInit(): voiid {} estivre assim com o void quer dizer que ele nao ter retorno, quando nao tem ele nao da erro porem é possivel 
 ter o retorno 
 
*ngOnChanges() recebe dados atravez de um @Input(), toda vez que se recebe dados no imput o onChanges é invocado, caso nao receba não é invocado.
o input recebe dados de fora entao caso voce delcare outra coisa na sua invocação ele ira substituir pelo dado externo

Obs. quando colocamo acento grave (``) podemos dar enter e colocar mais de uma linha de comando no mesmo local 

*ngDoCheck() sempre é inicializa quando se ha um evento de verificação do componente, verificando seus valores 
o ngDoCheck posui alguns filhos que podem ser utilizados tambem:
 *ngAfterContentInit() sempre sera utilizado apos uma ação que ira geram uma vizualizacao ou valores a sem exibidos
 *ngAfterContentChecked() é utilzado para validação dos valores para ver se estes valores foram alterados em algum momento 
 *ngAfterViewInit() é utilzado apos sua aplicação toda inicializada, ou seja, fara alguma ação só apos toda inicialização 
 *ngAfterViewChecked() ele é utilzado para fazer verificação apos todo o carregamento da pagina e logo apos o carregamento verifica as alterações de valores

*ngOnDestroy() ele é invocado toda vez apos um componete ou ação realizar a ocultação ou destruição da função utilitzado oara destruir e nao ter vazamento de memoria

--- DATA BINDiNG ---
nada mais é que a ligação dos dados, dentro do data Binding temos açgumas formas de trabalhar com os dados:
Interpolation;
Property Binding;
Event Binding;
Two-way binding;

*Interpolation permite que voce incorpore os dados dentro do Html utilizando as {{}} que vem do nosso ts(component)
*Property Binding permite utilzar funções ou dados do ts no html como o [disabled]="nomefuncao" esse seria o que é colocado entre [] 
se caso nao tivesse os [] o disabled seria uma função, porem no caso ele chama uma função 
*Event binding sao eventos que escutam e respondem de acordo com ações do usuario o tipo de evento é entre () como exemplo o (click)=""  
*Two-way binding é ua mistura do Property e Event ele é utilizado com ([])

---- Diretivas ----
sao classes que adcionam um comportamento aos elementos da apicação, como gerenciar listas, formularios e estilos
as diretivas podem ser divididas em atributos e estruturais
*Diretivas de atributos
sao alterações realizada na aparencia ou no comportamento dos elementos, componentes ou nas demaias sao usados:
.ngClass - adciona ou remove um conjunto de classes
.ngStyle - ||                 um conjunto de estilos do HTML
.ngModel - ||                 faz a transição de dados bidirecional em um elemento do formulario

*Diretivas estruturais sao os comportamentos que moldam, condicionais como
-ngIf - condicão se
-ngFor - laço de repetição
-ngSwith - conjunto de diretivas por exemplo caso for true faz uma coisa caso false faz outra

*ng-template utilizado para fazer validações antes de carregar o template otimizando navegação
*ng-content utilizado para a reutilização de templantes de forma opcional em outro template utilizando partes ou inteiro 
<ng-content> utilza todo o codigo mais se colocar assim por exemplo <ng-content select="h1"> 

----- Pipes ----
é utilizado para atribuir alores ou funções em alguma variavel por exemplo 
<p>sem PIPE</p>
{{date}}

<p>com PIPE</p>
{{date | date: 'dd/MM/yyyy'}}

no caso acima coloco  pipe para modificar a formatação da data


---- @NgModule ----
dentro de um projeto angular é feito varios modulos que compoe um projeto só é usual que didiva sua aplicação em varias partes como login, cadastro, relatorios e etc
dentro do ng-model possiumos alguns decorators a serem utilzados como 

@NgModule({
declarations: [], - serve para declara os componentes dentro do nosso modulo especifico
imports: [], - serve para importar os componetes  dentro do modulo
exports: [], - utilizado para exportar para outros modulos os componentes do modulo atual 
providers: [], - usado para requisições externas no backEnd tambem services
bootstrap: [], - é utilizado APENAS(app.component) no modulo principal para ser o start da aplicação
})

*sub-module 
neste caaso sao criados componetes que serao utilizados em toda a aplicação 


---- Comunicação de dados ----
a comunicação é realizada atraves do @input e @output ambos sao trafegos de dados entre pai e filhos



------------------------------------------------------
Algumas extenções VsCode
*PATH AUTOCOMPLETE
------------------------------------------------------

.trim remove todos os esçaos de frente  de traz da variavel

*-*-*-*-*-*-*-*-*-*-*-*-*-*

Como publicar uma previa do site no GitHub

* é possivel publicar indo no repositorio
* logo apos em pages
* selecionar o main do seu projeto
* colocar tambem /root
* depois colocar um nome e publicar 
isso servira para se ter uma noao de como ele se comportara na nuvem

*-*-*-*-*-*-*-*-*-*-*-*-*-*

*Subscrible é um evento que apos desenvolvido ele fica esperando determinda ação ou escutando o que ela vai retornar para 
executar determinada ação 


**OBS Quando necessario colocar uma href="" e nao utilizar sua função de link por exemplo basta usar o href="javascript: void(0)" que inabilita a função

**Routes**
as rotas sao utilizadas para a navegação das pagina, path é o nome do arquivo o qual sera carregado sempre que tiver uma path vazia("" seria assim e a rota é a principal) colocar 
o pathMatch: 'full' para que o angular nao renderize coisas a mais que o solicitado 

Dentro das aspas do path é o nome da rota que sera redirecionada, para validar as rotas é possivel criar uma pagina 404 porem caso a pessoa digite uma rota 
que nao existe basta colocar no path '**'(chamada de rota coringa ) assim o anular ira enteder que a rota acessada nao existe assim voce pode redirecionalo para a 404 ou uma rota esecifica.

**Não é possivel criar pastas com nome só com numeros

**href="" é utilizado para os link porem nao é muito usual e nem performatico para isso é utilizado o routerLink

**routerLinkActive utilizado para estilizar as rotas colocando cor ou efeitos do css/scss 

**routerLinkActiveOptions por exeplo caso voce queira estrilizar apenas a rota que foi clicada é preciso utilza-lo 
caso nao o utile e a estilização for "/"(home) ou "/perfil"(seria uma rota) ambas serao estilizadas entao é necessario utiliza-lo e
colocar o exact: true tambem assim  :
-> [routerLinkActiveOptions]="{ exact: true }"

**router
      /* vai para rota sem dar o reload na pagina normalmente utilzada para rotas internas e a forma de utilza-lo tem que ser assim 
      this.router.navigate(['404']);
      /* vai para rota com o reload usado apra redirecionar para outras rotas externas e é utilzado com abaixo
      this.router.navigateByUrl('404');
obs. sempre que no ngmodles do routing tiver forRoot() esse é o principal

**rotas filhas sao as rotas que provem de uma principal /sobre/:id/dados sobre pode ser uma rota pai e :id/dados uma rota filha que sera invocada pos a pai ou utilizando recursos da pai

**LAzy Loading carregamento aos poucos e quando carrega salva no dispositivo sem a necessidade de recarregar novamente tornando o sistema mais rapido 

**no angular 1 ou em algumas aplicações é necessario usar o Hash(#) home/# no caso basta colocar no modulo de rota root como abaixo 
@NgModule({
  imports: [RouterModule.forRoot(routes, { useHash: true })],
  exports: [RouterModule]
})

*transforma pixel em rem
https://nekocalc.com/px-to-rem-converter

-------------------------------------------------------------------
*********** se necessario rodar um server local para teste sem subir para DEV ***********
*Instala a biblioteca
npm install http-server -g

*builda utilizando as configurações do servidor
ng build --named-chunks 

*start o servidor
http-server dist/SCA (sca é trocado pelo nome do projeto)
-------------------------------------------------------------------

*tap retorna um valor pegando dentro de uma url ou um objeto 
*map é a mesma coisa do forEach porem o for each é utilizado para atribuir fazer loop em um objeti iu array
ja o map é feito para fazer o loop e aribuir valores ou alterar valeres do array e objeto

*forkJoin[] - é utilzado para executar duas api ao mesmo tempo sem utilizar varios subcribes e ao final do processo ele nos da resposta 

**Quando se precisa que uma funcção seja executada imediatamente pode pode ser escrita como abaixo 
	**padrao**
	function teste(){ aqui fica o codigo};
	logo apos é chamada quantas ezes necesario
	apenas colocando o teste();
	**forma imediata**
	function(){codigo aqui}();
nao precisa declara ela com um nome especifico pois sera invocada imediatamente

*quando necessario retirar um elemento do array da ultima posição  basta colocar o 
nome_do_array.pop();
quando necessario tirar o primeiro nome_do_array.shift():

*touch nome_arquivo.Extensao_arquivo cria o arquivo pelo terminal 

*Quando necessario ficar apertando ctrl + f5 ha a opcao de desabilitar o cach na inspeção do navegador 
e habilitar disable cache

*Fech busca em determinado caminha com a promessa de uma resposta

*catch retorno de erro

*finally sempre sera executado mesmo se der erro ao final 

*debugger utilizado quando necessario encontrar a aplicação no log do navegador ele fara com que voce va direta na onde foi declarado quando abrir o sources

*quando necessario executar mais de uma chamada ao mesmo tempo podemos fazer uma promise

Promise.all([
fetch('Aqui o que sera executado'])
fetch('Aqui o que sera executado'])
fetch('Aqui o que sera executado'])
fetch('Aqui o que sera executado'])
]).then((results) => {
aqui vai o codigo que sera executado apos as promessas sera cumpridas
})


**Caso necessario colocar um herf para linkar algo  seja preciso retirar a linha que fica embaixo com um link basta declarar no css o text-decoration: none;

**DOM - Document Object Model é como o navegador ve sua aplicação que nada mais é uma forma de arvore que chama suas tags de acordo com o que foi feito no Html

**shadow -  basicamente uma forma de arvore porem que nao esta na dom mais é exibida nela por isso se chama fantasma porem ela estara em outro lugar sende requisitada no hmtl

*array multi types é um array que pode ser definido mais de um tipo como let meuArray:(string | number)[] = ["gui", 27] nesse caso a ordem dos fatores nao mudam o resultado 

*Tuplas é um array multiTypes tambem porem a sua ordem deve ser swguida e retonadad de acordo com o esperado let meuArray:[string, number, number] = ["gui", 1.79, 27]

* é possivel tipar as funções para que ela sempre retorne o mesmo tipo function teste(): string {}
* é possivel tipar as funções para que retorne mais de um tipo function teste(): string | number {}

**o tipo any faz com que sua função sempre retone porem nao é usual 

*Async sempre dee ser usado em promisses que serao executada de forma assincrona

*private a variavel só pode ser acessada dentro da mesma classe  e o protected pode ser acessado tambem de subclasses que erdam esta classe e o public todas as classes veem 

*termos genericos any sao utilizados somente quando nao se sabe o que ira retornar como exemplo em um arry 

*spread(...) nada amis é que aceitar mais de um item  

Exemplo - 
	function concatArray(...itens: any[]): any[] {
		return new Array().concat(...itens);
	}
	const numArray = concatArray([1,5], [3]);
	console.log(numArray);
	
	neste exemplo é aceito varios array e concatena todos que foram passados no caso acima o resultado sera [1,5,3]

*StackBlits é  um local para codificar online com projetos pre instalados com o basico de varios projetos 

*(mouseover)="funcao()" é o evento do html utilizado quando se passa o mouse em cima de alguma tag e é possivel chmar uma função

*ngIf pode se utilizar o else para dimiuir codigo 
Ex
<tag *ngIf="";else anotherBlock></tag>

<ng-template #anotherBlock></ng-template>

*ng-content

***Quando necessario editar algo direto no git hub é so aperta " . " que ira abri um editor online

**Justify-content: cente é utilizado quando for coluna e o align-items: center é quando é linha

**Rotas na configuração de rotas é possivel declarar se voce quer a rota exatamente igual ao path ou se ela pode ter variações 
assim utilza o pathMatch: 'full'(para que seja exatemnte igual) ou 'prefix' quando ela contem o path mais pode conter outras coisas por padrao 
é o prefix normalmente é usal utilzar o full para rotas inicial(url principal) para que o programa nao se confunda com o passar do desenvolvimento

**rotas coringaé poassado uma string ou seja uma nova rota que pode ser uma pagina personalizada apra erro ou só '' que o redirecionara para a home 
Dentro das rotas é possivel pegar o conteudos da rotas com o activedRoute caso precise pegar depois do ? é preciso usar o queryParams e ser for preciso pegar dos filhos basta colocar FirstChild no lugar do queryParams ou o filho que for 
rotas filhas podem herdar o começo da rota pai e mais um encremento sendo assim muito util em nao precisar duplicar as rotas  

** utilizado paraque o app saiba interpretar json
 "resolveJsonModule": true,
    "allowSyntheticDefaultImports": true,

 ** quando necessario estilizar algo para que o ouse vire a maozinha colocar  cursor: pointer; no css
estilização para simular o efeito de clique
.btn-option:active {
    position: relative;
    top: 1px
}

**as keyof typeof é quando é necessario declarar que uma variavell vai se comportar de acordo com o que esta vindo em seu payload

------------------Testes Unitarios------------------
Teste unitarios sao diferentes dos testes realizados com o fluxo do app funcionando se ele vai carregar a apagina ou se vai pra determinada tela ou determinada funciionalidade
o teste unitario vai alem ele executao fluxo de sistema executando as funções com pequenos pedaços de codigos que fara uma simulação de como ele realmente se comportara

**Guarda de rotas sao bsaicamente um verificador de rotas que farao alguma açao antes durante ou apos a ação do usuario 
os tipos de rotas sao:
CanActivete: usadas em login que a rota só sera ativadas apos a validação
CanDeactivate: um exemplo é quando alguem edta preechendo um formulario e decide sair do site e ele só vai sair se confirmar a ação 
canLoad: verifica se o modolo pode ser carregado que utiliza lazy load porque o usuario nao pode acessar a rota para depois falar que ele nao tem permissao para acessa-la
CanActiveChild é semelhante ao canActive porem de rotas aninhadas  

** o ~ tria a necessidade de ficar colcando ../../ se colocar o ~ ele pega o caminho relativo 